Checkpoint
Express API server that manages something (to-dos, users, recipes, events, cars, students)
REQUIREMENTS:
- We want an API endpoint (route) that can:
- add an item to the db
- update an item in the db, given the id
- list a summary of all items in the db
- get details about a single item, given the id
- delete an item in the db, given the id

you must use more than 1 file. Like, organize your code using a router file and controller file
you must use the static functionality to server up an html file that acts as the documentation for your API
Your code/functions should have good code comments/ documentation
Your app must connect to a database (mysql)
You must use dotenv module to store sensitive information (db password, username, url)
*******************************************
I need to complete line 12
I need to add good comments
I need to get details of a recipe
I need to be able to delete a recipe
I need to be able to update a recipe
Also add the SQL statement I used to create the table in the database
*************************************************************************
Homework 6/16/22
Assignment: Build an Express backend, connected to mysql that has the following 4 routes:
1. /register : accept a username/email and password, and add a user entry in the database along with the password hash.
2. /login : accepts a username/email and password, and returns a signed JWT (JSON web token) if the password is correct
3. any route, that does anything you want, but it must respond correctly for any request even if it doesn't contain a valid token
(easy, this is what we have been doing so far).
4. a route that requires a valid signed token to complete successfully (this is the new, you will need a middleware!)
**********************************************************************************************************************
Homework 6/23/22
Checkpoint #2 (#1 & #3 are the bulk of this assignment)
1. Data Model Picture (ERD diagram)
2. Create table Queries for your data model  (SQL statements)
3. A list of the routes that you intend to implement, and document what the route will do
4. Implement a good portion of your routes (looking for 75%)(recipe routes)
5. If your app will have protected routes (need authentication), then implement a "/register" and "/login" routes
6. If your app will have protected routes, then implement middleware to check that a request has a valid token
7. Deploy your backend to some cloud server (heroku)
8. Connect your backend to Mysql (probably AWS)

** Routes**